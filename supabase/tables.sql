-- Create profiles table to store public user data
CREATE TABLE public.profiles (
    id uuid NOT NULL,
    updated_at timestamp with time zone null,
    full_name text null,
    avatar_url text null,
    role text not null default 'student',
    points integer not null default 0,
    level integer not null default 1,
    current_streak integer not null default 0,
    last_login_date date,
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users (id) ON DELETE CASCADE,
    CONSTRAINT profiles_role_check CHECK ((role = ANY (ARRAY['student'::text, 'teacher'::text])))
);

-- Function to create a public profile for each new user
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

-- Trigger to call the function when a new user signs up
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Create essays table
CREATE TABLE public.essays (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    user_id uuid NOT NULL,
    title character varying NOT NULL,
    type character varying NOT NULL,
    content text NOT NULL,
    image_url text null,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    score integer NOT NULL,
    feedback text NOT NULL,
    suggestions text NOT NULL,
    estimated_grade character varying NOT NULL,
    corrected_image_url text null,
    teacher_feedback_text text null,
    reviewed_by_teacher_at timestamp with time zone null,
    CONSTRAINT essays_pkey PRIMARY KEY (id),
    CONSTRAINT essays_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
);

-- Create community_posts table
CREATE TABLE public.community_posts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text NOT NULL,
  content text NULL,
  image_url text NULL,
  video_url text NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT community_posts_pkey PRIMARY KEY (id),
  CONSTRAINT community_posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create badges table
CREATE TABLE public.badges (
  id integer generated by default as identity,
  name character varying not null,
  description text not null,
  icon_name character varying not null,
  points_reward integer not null default 0,
  constraint badges_pkey primary key (id)
);

-- Create user_badges table
CREATE TABLE public.user_badges (
  user_id uuid not null,
  badge_id integer not null,
  created_at timestamp with time zone not null default now(),
  constraint user_badges_pkey primary key (user_id, badge_id),
  constraint user_badges_badge_id_fkey foreign key (badge_id) references badges (id) on delete cascade,
  constraint user_badges_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);

-- Pre-populate badges
INSERT INTO public.badges (name, description, icon_name, points_reward) VALUES
('Primeira Redação', 'Enviou sua primeira redação para correção.', 'Award', 10),
('Mestre do ENEM', 'Enviou 5 redações do ENEM com nota acima de 80.', 'Trophy', 50),
('Espírito Comunitário', 'Fez 10 comentários na comunidade.', 'Users', 20),
('Sequência Perfeita', 'Entrou no app por 7 dias seguidos.', 'Flame', 30);


-- Learning Resources Tables
CREATE TABLE public.resources (
  id uuid not null default gen_random_uuid(),
  creator_id uuid not null,
  title character varying not null,
  description text null,
  resource_type character varying not null,
  visibility character varying not null default 'PUBLIC'::character varying,
  video_url text null,
  image_url text null,
  created_at timestamp with time zone not null default now(),
  constraint resources_pkey primary key (id),
  constraint resources_creator_id_fkey foreign key (creator_id) references auth.users (id) on delete cascade,
  constraint resources_resource_type_check check ((resource_type = any (array['VIDEO'::character varying, 'MIND_MAP'::character varying, 'QUIZ'::character varying]))),
  constraint resources_visibility_check check ((visibility = any (array['PUBLIC'::character varying, 'RESTRICTED'::character varying])))
);

CREATE TABLE public.quiz_questions (
  id uuid not null default gen_random_uuid(),
  resource_id uuid not null,
  question_text text not null,
  "order" integer not null default 0,
  constraint quiz_questions_pkey primary key (id),
  constraint quiz_questions_resource_id_fkey foreign key (resource_id) references resources (id) on delete cascade
);

CREATE TABLE public.quiz_options (
  id uuid not null default gen_random_uuid(),
  question_id uuid not null,
  option_text text not null,
  is_correct boolean not null default false,
  constraint quiz_options_pkey primary key (id),
  constraint quiz_options_question_id_fkey foreign key (question_id) references quiz_questions (id) on delete cascade
);

CREATE TABLE public.teacher_student_connections (
  teacher_id uuid not null,
  student_id uuid not null,
  created_at timestamp with time zone not null default now(),
  constraint teacher_student_connections_pkey primary key (teacher_id, student_id),
  constraint teacher_student_connections_student_id_fkey foreign key (student_id) references auth.users (id) on delete cascade,
  constraint teacher_student_connections_teacher_id_fkey foreign key (teacher_id) references auth.users (id) on delete cascade
);

CREATE TABLE public.student_quiz_attempts (
  id uuid not null default gen_random_uuid(),
  student_id uuid not null,
  quiz_resource_id uuid not null,
  score integer not null,
  total_questions integer not null,
  completed_at timestamp with time zone not null default now(),
  constraint student_quiz_attempts_pkey primary key (id),
  constraint student_quiz_attempts_quiz_resource_id_fkey foreign key (quiz_resource_id) references resources (id) on delete cascade,
  constraint student_quiz_attempts_student_id_fkey foreign key (student_id) references auth.users (id) on delete cascade
);


-- Stored Procedures for Stats
CREATE OR REPLACE FUNCTION get_user_stats(p_user_id uuid)
RETURNS TABLE(total_essays bigint, average_score numeric) AS $$
BEGIN
    RETURN QUERY
    SELECT
        (SELECT COUNT(*) FROM public.essays WHERE user_id = p_user_id) as total_essays,
        (SELECT AVG(score) FROM public.essays WHERE user_id = p_user_id) as average_score;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_user_progress_overall(p_user_id uuid)
RETURNS TABLE(date text, score double precision) AS $$
BEGIN
    RETURN QUERY
    SELECT
        to_char(created_at, 'YYYY-MM-DD') as date,
        AVG(score) as score
    FROM public.essays
    WHERE user_id = p_user_id
    GROUP BY to_char(created_at, 'YYYY-MM-DD')
    ORDER BY to_char(created_at, 'YYYY-MM-DD');
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_user_progress_by_type(p_user_id uuid)
RETURNS TABLE(type text, "averageScore" double precision) AS $$
BEGIN
    RETURN QUERY
    SELECT
        essays.type,
        AVG(essays.score) as "averageScore"
    FROM public.essays
    WHERE user_id = p_user_id
    GROUP BY essays.type;
END;
$$ LANGUAGE plpgsql;
